generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                    @id @default(autoincrement())
  email              String                 @unique
  passwordHash       String
  name               String
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  addresses          Address[]
  orders             Order[]
  cartItems          CartItem[]
  reviews            Review[]
  passwordResetToken PasswordResetToken?
}

model Address {
  id         Int       @id @default(autoincrement())
  label      String?
  fullName   String
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  orders     Order[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  slug        String          @unique
  description String
  priceCents  Int
  rating      Float           @default(0)
  inventory   Int             @default(0)
  sku         String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  category    Category        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  brand       Brand           @relation(fields: [brandId], references: [id])
  brandId     Int
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  url        String
  alt        String
  isPrimary  Boolean  @default(false)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

model Review {
  id          Int       @id @default(autoincrement())
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  reviewer    String
  externalRef String?  @unique
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                 Int             @id @default(autoincrement())
  orderNumber        String          @unique
  status             OrderStatus     @default(PENDING)
  paymentStatus      PaymentStatus   @default(PENDING)
  shippingStatus     ShippingStatus  @default(NOT_SHIPPED)
  totalCents         Int
  subtotalCents      Int
  taxCents           Int
  shippingCostCents  Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int
  addressSnapshot    Json
  shippingTrackingId String?
  items              OrderItem[]
  address            Address?        @relation(fields: [addressId], references: [id])
  addressId          Int?
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  productName String
  productSlug String
  quantity    Int
  priceCents  Int
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     Int
  imageUrl    String?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FULFILLED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

enum ShippingStatus {
  NOT_SHIPPED
  IN_TRANSIT
  DELIVERED
  DELAYED
}
